#!/usr/bin/env ruby

require 'optparse'
require 'active_support'
require 'active_support/core_ext'
require 'rake'

@options = {}
OptionParser.new do |opts|
  nl = "\n                                     "
  
  opts.banner = "Usage: zwr new PROJECT_NAME [options]"
  opts.separator ""
  opts.separator "Specific options:"
  opts.separator ""

  opts.on("-v", "--[no-]verbose", "Run verbosely, will print really a lot of#{nl}output") do |v|
    @options[:verbose] = v
  end
  
  @options[:bundle] = true
  opts.on("--skip-bundle",        "Skip bundle install. This will speed up#{nl}" +
                                  "execution, but wil not install missing#{nl}" +
                                  "gems. Only good for debugging templates.") do |v|
    @options[:bundle] = not(v)
  end
  
  @options[:activerecord] = true
  opts.on("--skip-active-record", "Skip activerecord. Use this if you will#{nl}" +
                                  "use Mongo.") do |v|
    @options[:activerecord] = not(v)
  end

  opts.on("-r", "--ruby RUBY_VER", "Set ruby version in .rvmrc") do |ruby_ver|
    @options[:ruby_ver] = ruby_ver
  end

  @options[:mongoid] = false
  opts.on("--mongoid", "Use MongoDB with Mongoid gem") do |v|
    @options[:mongoid] = v
    if @options[:mongoid]
      @options[:activerecord] = false
    end
  end
  
  @options[:angular] = true
  opts.on("--skip-angular",       "Skip angular. If you use Angular, it#{nl}" +
                                  "will also generate the Main controller#{nl}" +
                                  "to start the angular app, which will#{nl}" +
                                  "be set as root.") do |v|
    @options[:angular] = not(v)
  end
  
  @options[:devise] = true
  opts.on("--skip-devise",        "Skip Devise . If you use Devise, it#{nl}" +
                                  "will also generate the User model and#{nl}" +
                                  "some helper controllers.") do |v|
    @options[:devise] = not(v)
  end
end.parse!

def putsv txt
  puts txt.to_s if @options[:verbose]
end

putsv "         \033[35mzwr\033[0m  running!"
putsv "     \033[35moptions\033[0m  #{@options.map{|k,v| "#{k}=#{v}"}.join(' ')}."
putsv "        \033[35mexec\033[0m  #{ARGV.join}."

def show_usage
  puts "Usage:"
  puts ""
  puts "  zwr [new|deploy] app_name [options]"
end

case ARGV[0]
when 'new'
  if ARGV.length < 2
    puts "Not enough parameters"
    puts ""
    show_usage
  elsif `git status 2>&1` != "fatal: Not a git repository (or any of the parent directories): .git\n"
    puts "You are in a git repo, and that is not good!"
  else
    cmd = <<-CMD.gsub /^ *$\n/, ''
      rails new #{ARGV[1]} #{"--skip-bundle" unless @options[:bundle]} --skip-spring 
              #{"--skip-active-record" if not @options[:activerecord]} 
              -m #{File.expand_path('../../lib/zwr/app_template.rb', __FILE__)}
              #{"use-mongoid" if @options[:mongoid]}
              #{"use-angular" if @options[:angular]}
              #{"use-devise" if @options[:devise]}
      CMD
    putsv "        \033[35mexec\033[0m  #{cmd.strip}"
    exec(cmd.gsub(/\r/," ").gsub(/\n/," ").gsub(/\ \ +/," "))
  end
when 'deploy'
  if ARGV.length < 2
    puts "Not enough parameters"
    puts ""
    show_usage
  elsif ENV['USER'] != "root"
    puts "This script must be run as super user. Use sudo zwr deploy #{ARGV[2]}"
  else
    if File.directory? "/var/rails_apps/#{ARGV[1]}"
      puts "Project is already deployed, do the following:"
      puts "cd /var/rails_apps/#{ARGV[1]}"
      puts "rake zwr:production:update"
    else
      Dir.chdir "/var/rails_apps"
      putsv "Deploying new project #{ARGV[1]}"
      `git clone git@github.com:zmilojko/#{ARGV[1]}.git`
      Dir.chdir "/var/rails_apps/#{ARGV[1]}"
      `cd /var/rails_apps/#{ARGV[1]} ; git checkout production`
      `bundle install`
      `cd /var/rails_apps/#{ARGV[1]} ; RAILS_ENV=production rake db:migrate`
      `cd /var/rails_apps/#{ARGV[1]} ; RAILS_ENV=production rake db:seed`
      `mkdir /var/rails_apps/#{ARGV[1]}/tmp`
      `chmod 777 /var/rails_apps/#{ARGV[1]}/tmp -R`
      `chmod 777 /var/rails_apps/#{ARGV[1]}/log`
      `chmod 777 /var/rails_apps/#{ARGV[1]}/db`
      `chmod 777 /var/rails_apps/#{ARGV[1]}/db/production.sqlite3`
      virtual_host_file = (<<-VHFILE.strip_heredoc)
      <VirtualHost *:80>
          # This Rails web app will use Ruby 1.9.3, as installed by RVM
          PassengerRuby /usr/local/rvm/wrappers/ruby-1.9.3-p0/ruby
          ServerName #{ARGV[1]}.zwr.fi
          DocumentRoot /var/rails_apps/#{ARGV[1]}/public
          <Directory /var/rails_apps/#{ARGV[1]}/public>
            AllowOverride all
            Options -MultiViews
          </Directory>
      </VirtualHost>
      VHFILE
      `echo "#{virtual_host_file}" > /etc/httpd/virtual_hosts/#{ARGV[1]}.conf`
      `service httpd reload`
      `touch /var/rails_apps/#{ARGV[1]}/tmp/restart.txt`
    end
  end
else
  show_usage
end
